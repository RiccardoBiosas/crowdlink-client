pragma solidity ^0.5.16;
import '../node_modules/@openzeppelin/contracts/ownership/Ownable.sol';
import '../node_modules/@openzeppelin/contracts/math/SafeMath.sol';


 
contract CrowdlinkReferral is Ownable {
    struct Influencer {
        address addr; //influencer public key
        address owner_address; //referral campaign's owner address
        string owner_website; // website to which the marketing URL is connected
        uint reward; //influencer reward
        string link; //influencer referral link generated by the shilling company & our API
        
        
        uint referredCount; // how many times it was referred
        mapping (bytes32 => bool) referred; //is it referred?
    }


    
    struct ReferralCampaign {
        string website;
        bool isActive;
        uint campaignBudget;
        uint campaignReward;
        // mapping(string => Influencer[]) referral_campaign_influencers_list; //website to influencer
        
        // string[] referral_links; //save the unique referral link which will be used to refer to the corresponding influencer through the string=>influencer mapping
    }
    
    mapping(string => string[]) public website_to_link; //website to referral links array
    mapping(string => Influencer) public influencers; // map referral_links to influencers -> one to one relationship
    mapping(string => mapping(string => Influencer)) public website_to_influencer; //map a website to a unique referral link to its influencer

    mapping(address => uint256) public campaign_owner_balance;
    
 
     mapping(address => uint) public referral_campaign_balance; //referral campaign owner's balance
     mapping(address => ReferralCampaign[]) public referral_campaign_collection; //lists of referral campaigns associated to an address
    
    uint private referredCount;
    uint private referrersCount;
    
        
    function helper_compareStrings(string memory a, string memory b) public pure returns(bool) {  //probably should be internal
       
        return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));
    }
    
    function addInfluencer(string memory _website, string memory _link, address _owner) public returns(bool) {
        (uint referral_campaign_indx, bool found)= helper_selectReferralCampaign(_owner, _website);
        //also check if it's still isActive
        
        if(found) {
            uint reward = referral_campaign_collection[_owner][referral_campaign_indx].campaignReward;
            
            Influencer storage influencer_instance = influencers[_link];
         
            influencer_instance.addr = msg.sender;
            influencer_instance.owner_address = _owner;
            influencer_instance.owner_website = _website;
            influencer_instance.reward = reward;
            influencer_instance.link = _link;
            influencer_instance.referredCount = 0;
            
       
            string[] storage website_to_link_instance = website_to_link[_website];
            website_to_link_instance.push(_link);
            website_to_link[_website] = website_to_link_instance;
            
            
            
            
            return true;
        } else {
            return false;
        }
        
    }
    
    
    
    function openReferralCampaign(uint _campaignBudget, uint _campaignReward, string memory _website )  public {
        //remember to add the payment
        ReferralCampaign memory referral_campaign_instance;
        referral_campaign_instance.website = _website;
        referral_campaign_instance.isActive = true;
        referral_campaign_instance.campaignBudget = _campaignBudget;
        referral_campaign_instance.campaignReward = _campaignReward;
        
        referral_campaign_collection[msg.sender].push(referral_campaign_instance);
        
    }
    
    function getBalanceOfInfluencer(string memory _link) view public returns (uint256) {
        Influencer storage influencer_instance = influencers[_link];
        string memory influencer_instance_link = influencer_instance.link;
        if(helper_compareStrings(influencer_instance_link, _link)) {
            address influencer_addr = address(influencer_instance.addr);
            return influencer_addr.balance;
            
        }
        return 0;
    }
    
    
    function helper_selectReferralCampaign(address _address, string memory _website) public view returns(uint256, bool) {
        uint indx = 0;
        bool found = false;
        for(uint256 i=0; i<referral_campaign_collection[_address].length; i++) {
            string memory website = referral_campaign_collection[_address][i].website;
            if(keccak256(bytes(website))  == keccak256(bytes(_website))){
                indx = i;
                found = true;
            }
        }
       
        return (indx, found);
        
    }
    
    
    //add forward rewards function


        
    function lookupCampaignReferralsCollectionLength(address _account_address) public view returns(uint){
       require(referral_campaign_collection[_account_address][0].campaignBudget != 0);
        return referral_campaign_collection[_account_address].length;
    }
    

    function lookUpCampaignReferral(address _account_address, uint256 _index) public view returns(string memory, uint256, uint256, bool, address[] memory)  {
        require(referral_campaign_collection[_account_address][_index].campaignBudget != 0);
        string memory campaign_referral_website = referral_campaign_collection[_account_address][_index].website;
        // Influencer[] memory referral_campaign_influencers_list = referral_campaign_collection[_account_address][index].referral_campaign_influencers_list[campaign_referral_website]; // array of influencers for the specific campaign_referral_website
        
        address[] memory referral_campaign_influencers_address_list = new address[](website_to_link[campaign_referral_website].length); //length of the array equal to length of the referral campaign's influencers array
        for(uint i=0; i<website_to_link[campaign_referral_website].length; i++) {
            
            address influencer_addr = influencers[website_to_link[campaign_referral_website][i]].addr;
            referral_campaign_influencers_address_list[i] = influencer_addr;
        }
        
        return (campaign_referral_website, referral_campaign_collection[_account_address][_index].campaignBudget, referral_campaign_collection[_account_address][_index].campaignReward, referral_campaign_collection[_account_address][_index].isActive, referral_campaign_influencers_address_list);
    }



    
    
    
}
